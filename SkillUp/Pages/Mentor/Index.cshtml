  @page
@using SkillUpBackend.Model
 @model SkillUp.Pages.Mentor.IndexModel


@{
    ViewData["Title"] = "Mentor Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - SkillUp</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        /* General styles */
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        /* Header styles */
        header {
            background-color: #dbeafe; /* Gentle blue */
            color: #333;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 60px; /* Uniform header height */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

            .header-left h1 {
                margin: 0;
                font-size: 1.5rem;
            }

            .header-left small {
                font-size: 0.9rem;
                color: #555;
                margin-left: 10px;
            }

        .header-right {
            display: flex;
            align-items: center;
        }

            .header-right a {
                margin-left: 15px;
                color: #333;
                text-decoration: none;
            }

        /* Sidebar styles */
        .sidebar {
            position: fixed;
            top: 60px; /* Below the header */
            left: 0;
            height: calc(100vh - 60px);
            width: 60px; /* Collapsed width */
            background-color: #343a40; /* Dark gray */
            color: #fff;
            transition: width 0.3s;
            overflow: hidden;
        }

            .sidebar:hover {
                width: 200px; /* Expanded width */
            }

            .sidebar a {
                display: flex;
                align-items: center;
                padding: 15px;
                color: #fff;
                text-decoration: none;
                transition: background 0.3s;
            }

                .sidebar a:hover {
                    background-color: #495057; /* Lighter gray */
                }

            .sidebar i {
                font-size: 20px;
                margin-right: 10px;
            }

            .sidebar span {
                display: none;
            }

            .sidebar:hover span {
                display: inline;
            }

        /* Main content styles */
        .main-content {
            margin-left: 60px; /* Space for collapsed sidebar */
            padding: 20px;
            transition: margin-left 0.3s;
        }

        .sidebar:hover ~ .main-content {
            margin-left: 200px; /* Space for expanded sidebar */
        }

        /* Footer styles */
        footer {
            text-align: center;
            padding: 10px;
            background-color: #f8f9fa;
            margin-top: auto;
        }

        /* Manage Buttons section */
        .manage-buttons {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

            .manage-buttons .btn {
                padding: 10px 20px;
                font-size: 16px;
                border-radius: 5px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

        .card {
            border-radius: 10px;
            border: 1px solid #ddd;
            overflow: hidden;
            margin-bottom: 20px;
        }

        .card-header {
            font-size: 18px;
            padding: 10px;
        }

        .card-body {
            padding: 20px;
            font-size: 16px;
        }

            .card-body p {
                margin-bottom: 15px;
                color: #555;
            }

        .btn {
            padding: 10px 20px;
            font-size: 14px;
            border-radius: 5px;
        }

    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="#">
            <i class="bi bi-house-door"></i>
            <span>Home</span>
        </a>
        <a href="#">
            <i class="bi bi-people"></i>
            <span>Batches</span>
        </a>
        <a href="#">
            <i class="bi bi-grid"></i>
            <span>Streams</span>
        </a>
        <a href="#">
            <i class="bi bi-calendar"></i>
            <span>Calendar</span>
        </a>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="panel">
            <h3>Welcome, Mentor</h3>

            <!-- Task Summary Cards -->
            <div class="row text-center">
                <!-- Unassigned Tasks -->
                <div class="col-md-3 mb-4">
                    <div class="card shadow-sm" data-bs-toggle="modal" data-bs-target="#unassignedModal" style="cursor: pointer;">
                        <div class="card-body">
                            <h5 class="card-title">Unassigned</h5>
                            <h2 class="display-5 text-primary">@Model.StateCount.OpenCount</h2>
                            <p class="text-muted">Unassigned Tasks</p>
                        </div>
                    </div>
                </div>

                <!-- In Progress Tasks -->
                <div class="col-md-3 mb-4">
                    <div class="card shadow-sm" data-bs-toggle="modal" data-bs-target="#inProgressModal" style="cursor: pointer;">
                        <div class="card-body">
                            <h5 class="card-title">In Progress</h5>
                            <h2 class="display-5 text-info">@Model.StateCount.InProgressCount</h2>
                            <p class="text-muted">Tasks in Progress</p>
                        </div>
                    </div>
                </div>

                <!-- Completed Tasks -->
                <div class="col-md-3 mb-4">
                    <div class="card shadow-sm" data-bs-toggle="modal" data-bs-target="#completedModal" style="cursor: pointer;">
                        <div class="card-body">
                            <h5 class="card-title">Completed</h5>
                            <h2 class="display-5 text-success">@Model.StateCount.CompletedCount</h2>
                            <p class="text-muted">Tasks Completed</p>
                        </div>
                    </div>
                </div>

                <!-- Weekly Completed Tasks -->
                <div class="col-md-3 mb-4">
                    <div class="card shadow-sm" data-bs-toggle="modal" data-bs-target="#ReviewModal" style="cursor: pointer;">
                        <div class="card-body">
                            <h5 class="card-title">Review</h5>
                            <h2 class="display-5 text-warning">@Model.StateCount.ReviewCount</h2>
                        </div>
                    </div>
                </div>
            </div>

    <!-- Modals -->
            <!-- Unassigned Modal -->
            <div class="modal fade" id="unassignedModal" tabindex="-1" aria-labelledby="unassignedModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="unassignedModalLabel">Unassigned Tasks</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (Model.StateCount.UnassignedTrainees.Any())
                            {
                                <ul>
                                    @foreach (var task in Model.StateCount.UnassignedTrainees)
                                    {
                                        <li>@task.Subtopic.Name - @task.Subtopic.Description</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No unassigned tasks available.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- In Progress Modal -->
            <div class="modal fade" id="inProgressModal" tabindex="-1" aria-labelledby="inProgressModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="inProgressModalLabel">Tasks in Progress</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (Model.StateCount.InProgressTrainees.Any())
                            {
                                <ul>
                                    @foreach (var task in Model.StateCount.InProgressTrainees)
                                    {
                                        <li>@task.Subtopic.Name - @task.Subtopic.Description</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No tasks in progress.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Completed Modal -->
            <div class="modal fade" id="completedModal" tabindex="-1" aria-labelledby="completedModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="completedModalLabel">Completed Tasks</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (Model.StateCount.CompletedTrainees.Any())
                            {
                                <ul>
                                    @foreach (var task in Model.StateCount.CompletedTrainees)
                                    {
                                        <li>@task.Subtopic.Name - @task.Subtopic.Description</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No tasks completed yet.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Weekly Completed Modal -->
            <div class="modal fade" id="ReviewModal" tabindex="-1" aria-labelledby="ReviewModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="ReviewModalLabel">To be Reviewed</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            @if (Model.StateCount.ReviewCount > 0)
                            {
                                <p>There are @Model.StateCount.ReviewCount tasks in Review this week.</p>
                            }
                            else
                            {
                                <p>Nothing to be reviewed this week.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

    <h2>Task Progress</h2>
    <table class="table table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Topic</th>
                <th>Subtopic</th>
                <th>Trainee</th>
                <th>State</th>
                <th>Due Date</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Topics == null || !Model.Topics.Any())
            {
                <tr>
                    <td colspan="6">No topics available.</td>
                </tr>
            }
            else
            {
                foreach (var topic in Model.Topics)
                {
                    if (topic.Subtopics == null || !topic.Subtopics.Any())
                    {
                        Console.WriteLine($"No Subtopics found for Topic: {topic.Name}");
                        continue;
                    }

                    foreach (var subtopic in topic.Subtopics)
                    {
                        // Filter UserSubtopics for the current subtopic
                        var userSubtopics = Model.UserSubtopics?
                        .Where(us => us.SubtopicId == subtopic.Id)
                        .ToList();

                        if (userSubtopics == null || !userSubtopics.Any())
                        {
                            Console.WriteLine($"No UserSubtopics found for Subtopic ID: {subtopic.Id}");
                            continue;
                        }

                        foreach (var userSubtopic in userSubtopics)
                        {
                            // Check for null UserName or missing details
                         @*    if (string.IsNullOrEmpty(userSubtopic.UserName))
                            {
                                Console.WriteLine($"UserName is missing for UserSubtopic with Subtopic ID: {userSubtopic.SubtopicId}");
                                continue;
                            } *@

                            <tr>
                                <td>@topic.Name</td>
                                <td>@subtopic.Name</td>
                                <td>@userSubtopic.Username</td>                          
                                <td>
                                    <form method="post" asp-page-handler="ChangeState">
                                        <input type="hidden" name="userId" value="@userSubtopic.UserId" />
                                        <input type="hidden" name="subtopicId" value="@userSubtopic.SubtopicId" />
                                        <select name="state" class="form-select form-select-sm">
                                            @foreach (var state in Enum.GetValues(typeof(TaskState)).Cast<TaskState>())
                                            {
                                                <option value="@state" selected="@(userSubtopic.State == state)">
                                                    @state
                                                </option>
                                            }
                                        </select>
                                        <button type="submit" class="btn btn-success btn-sm mt-1">Save</button>
                                    </form>
                                </td>
                                <td>@(userSubtopic?.DueDate?.ToShortDateString() ?? "Not Set")</td>
                            </tr>
                        }
                    }
                }
            }
        </tbody>

    </table>

        <div class="row justify-content-center mt-4">
            <!-- Manage Topics Panel -->
            <div class="col-md-4">
                <div class="card text-center shadow-sm">
                    <div class="card-header bg-primary text-white fw-bold">
                        Manage Topics
                    </div>
                    <div class="card-body">
                        <p>View, create, and edit topics for the program.</p>
                        <button onclick="AddTopic()" class="btn btn-primary" type="button">Manage Topics</button>
                    </div>
                </div>
            </div>

            <!-- Manage Subtopics Panel -->
            <div class="col-md-4">
                <div class="card text-center shadow-sm">
                    <div class="card-header bg-secondary text-white fw-bold">
                        Manage Subtopics
                    </div>
                    <div class="card-body">
                        <p>View, create, and edit subtopics under topics.</p>
                        <button onclick="manageSubTopics()" class="btn btn-secondary">Manage Subtopics</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Manage Topics and Subtopics -->
        <div class="mt-4 text-center">
            
        </div>
        </div>
        </div>
</body>
</html>


        <script>
    document.addEventListener("DOMContentLoaded", function () {
        const saveButtons = document.querySelectorAll(".save-state");

        saveButtons.forEach(button => {
            button.addEventListener("click", function () {
                const traineeId = this.dataset.traineeId;
                const form = document.getElementById(`stateForm-${traineeId}`);
                const formData = new FormData(form);

                fetch('/Mentor/Index?handler=ChangeState', { // Correct URL to your handler
                    method: "POST",
                    body: formData
                })
                    .then(response => {
                        if (response.ok) {
                            alert("State updated successfully.");
                            window.location.reload();
                        } else {
                            alert("Error updating state. Please try again.");
                        }
                    })
                    .catch(err => console.error("Error:", err));
            });
        });
    });

            function AddTopic() {
                // Navigate to Add Topic page (you may create an AddTopic Razor page for this)
                window.location.href = '@Url.Page("AddTopic")';
            }
            function manageSubTopics() {
                window.location.href = '@Url.Page("ManageSubtopic")';
            }
    function showComponent(componentId) {
        // Hide all component sections
        const sections = document.querySelectorAll('.component-section');
        sections.forEach(section => section.style.display = 'none');

        // Show the selected component section
        const selectedSection = document.getElementById(componentId);
        if (selectedSection) {
            selectedSection.style.display = 'block';
        }
    }
        </script>

